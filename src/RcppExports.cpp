// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// logcosh
double logcosh(double x);
RcppExport SEXP _unbiasedpathsampling_logcosh(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(logcosh(x));
    return rcpp_result_gen;
END_RCPP
}
// gaussian_max_couplingC
NumericVector gaussian_max_couplingC(const NumericVector& mu1, const NumericVector& mu2, const NumericMatrix& Sigma1, const NumericMatrix& Sigma2);
RcppExport SEXP _unbiasedpathsampling_gaussian_max_couplingC(SEXP mu1SEXP, SEXP mu2SEXP, SEXP Sigma1SEXP, SEXP Sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Sigma1(Sigma1SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Sigma2(Sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(gaussian_max_couplingC(mu1, mu2, Sigma1, Sigma2));
    return rcpp_result_gen;
END_RCPP
}
// gaussian_max_coupling_cholesky
NumericVector gaussian_max_coupling_cholesky(const NumericVector& mu1, const NumericVector& mu2, const Eigen::MatrixXd& Cholesky1, const Eigen::MatrixXd& Cholesky2, const Eigen::MatrixXd& Cholesky_inverse1, const Eigen::MatrixXd& Cholesky_inverse2);
RcppExport SEXP _unbiasedpathsampling_gaussian_max_coupling_cholesky(SEXP mu1SEXP, SEXP mu2SEXP, SEXP Cholesky1SEXP, SEXP Cholesky2SEXP, SEXP Cholesky_inverse1SEXP, SEXP Cholesky_inverse2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Cholesky1(Cholesky1SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Cholesky2(Cholesky2SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Cholesky_inverse1(Cholesky_inverse1SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Cholesky_inverse2(Cholesky_inverse2SEXP);
    rcpp_result_gen = Rcpp::wrap(gaussian_max_coupling_cholesky(mu1, mu2, Cholesky1, Cholesky2, Cholesky_inverse1, Cholesky_inverse2));
    return rcpp_result_gen;
END_RCPP
}
// xbeta_2
NumericVector xbeta_2(const NumericMatrix& X, const NumericVector& beta);
RcppExport SEXP _unbiasedpathsampling_xbeta_2(SEXP XSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(xbeta_2(X, beta));
    return rcpp_result_gen;
END_RCPP
}
// w_rejsamplerC
NumericMatrix w_rejsamplerC(const NumericVector& beta1, const NumericVector& beta2, const NumericMatrix& X);
RcppExport SEXP _unbiasedpathsampling_w_rejsamplerC(SEXP beta1SEXP, SEXP beta2SEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type beta2(beta2SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(w_rejsamplerC(beta1, beta2, X));
    return rcpp_result_gen;
END_RCPP
}
// w_max_couplingC
NumericMatrix w_max_couplingC(const NumericVector& beta1, const NumericVector& beta2, const NumericMatrix& X);
RcppExport SEXP _unbiasedpathsampling_w_max_couplingC(SEXP beta1SEXP, SEXP beta2SEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type beta2(beta2SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(w_max_couplingC(beta1, beta2, X));
    return rcpp_result_gen;
END_RCPP
}
// estimator_bin
double estimator_bin(List c_chains, int component, double lower, double upper, int k, int K);
RcppExport SEXP _unbiasedpathsampling_estimator_bin(SEXP c_chainsSEXP, SEXP componentSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP kSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type c_chains(c_chainsSEXP);
    Rcpp::traits::input_parameter< int >::type component(componentSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(estimator_bin(c_chains, component, lower, upper, k, K));
    return rcpp_result_gen;
END_RCPP
}
// gradlognormal
NumericVector gradlognormal(const NumericVector& x, const NumericVector& mean, const NumericMatrix& precision);
RcppExport SEXP _unbiasedpathsampling_gradlognormal(SEXP xSEXP, SEXP meanSEXP, SEXP precisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type precision(precisionSEXP);
    rcpp_result_gen = Rcpp::wrap(gradlognormal(x, mean, precision));
    return rcpp_result_gen;
END_RCPP
}
// rinvgaussian_c
NumericVector rinvgaussian_c(int n, double mu, double lambda);
RcppExport SEXP _unbiasedpathsampling_rinvgaussian_c(SEXP nSEXP, SEXP muSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(rinvgaussian_c(n, mu, lambda));
    return rcpp_result_gen;
END_RCPP
}
// rinvgaussian_coupled_c
NumericVector rinvgaussian_coupled_c(double mu1, double mu2, double lambda1, double lambda2);
RcppExport SEXP _unbiasedpathsampling_rinvgaussian_coupled_c(SEXP mu1SEXP, SEXP mu2SEXP, SEXP lambda1SEXP, SEXP lambda2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< double >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< double >::type lambda2(lambda2SEXP);
    rcpp_result_gen = Rcpp::wrap(rinvgaussian_coupled_c(mu1, mu2, lambda1, lambda2));
    return rcpp_result_gen;
END_RCPP
}
// sigma_
NumericMatrix sigma_(const NumericMatrix& X, const NumericVector& w);
RcppExport SEXP _unbiasedpathsampling_sigma_(SEXP XSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(sigma_(X, w));
    return rcpp_result_gen;
END_RCPP
}
// m_sigma_function_
List m_sigma_function_(const Eigen::Map<Eigen::MatrixXd>& omega, const Eigen::Map<Eigen::MatrixXd>& X, const Eigen::Map<Eigen::MatrixXd>& invB, const Eigen::Map<Eigen::VectorXd>& KTkappaplusinvBtimesb);
RcppExport SEXP _unbiasedpathsampling_m_sigma_function_(SEXP omegaSEXP, SEXP XSEXP, SEXP invBSEXP, SEXP KTkappaplusinvBtimesbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type invB(invBSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type KTkappaplusinvBtimesb(KTkappaplusinvBtimesbSEXP);
    rcpp_result_gen = Rcpp::wrap(m_sigma_function_(omega, X, invB, KTkappaplusinvBtimesb));
    return rcpp_result_gen;
END_RCPP
}
// xbeta_
NumericVector xbeta_(const NumericMatrix& X, const NumericVector& beta);
RcppExport SEXP _unbiasedpathsampling_xbeta_(SEXP XSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(xbeta_(X, beta));
    return rcpp_result_gen;
END_RCPP
}
// rmvnorm
NumericMatrix rmvnorm(int nsamples, const NumericVector& mean, const NumericMatrix& covariance);
RcppExport SEXP _unbiasedpathsampling_rmvnorm(SEXP nsamplesSEXP, SEXP meanSEXP, SEXP covarianceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nsamples(nsamplesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type covariance(covarianceSEXP);
    rcpp_result_gen = Rcpp::wrap(rmvnorm(nsamples, mean, covariance));
    return rcpp_result_gen;
END_RCPP
}
// rmvnorm_cholesky
NumericMatrix rmvnorm_cholesky(int nsamples, const NumericVector& mean, const Eigen::MatrixXd& cholesky);
RcppExport SEXP _unbiasedpathsampling_rmvnorm_cholesky(SEXP nsamplesSEXP, SEXP meanSEXP, SEXP choleskySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nsamples(nsamplesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type cholesky(choleskySEXP);
    rcpp_result_gen = Rcpp::wrap(rmvnorm_cholesky(nsamples, mean, cholesky));
    return rcpp_result_gen;
END_RCPP
}
// dmvnorm
NumericVector dmvnorm(const NumericMatrix& x, const NumericVector& mean, const NumericMatrix& covariance);
RcppExport SEXP _unbiasedpathsampling_dmvnorm(SEXP xSEXP, SEXP meanSEXP, SEXP covarianceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type covariance(covarianceSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnorm(x, mean, covariance));
    return rcpp_result_gen;
END_RCPP
}
// dmvnorm_cholesky_inverse
NumericVector dmvnorm_cholesky_inverse(const NumericMatrix& x, const NumericVector& mean, const Eigen::MatrixXd& cholesky_inverse);
RcppExport SEXP _unbiasedpathsampling_dmvnorm_cholesky_inverse(SEXP xSEXP, SEXP meanSEXP, SEXP cholesky_inverseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type cholesky_inverse(cholesky_inverseSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnorm_cholesky_inverse(x, mean, cholesky_inverse));
    return rcpp_result_gen;
END_RCPP
}
// rnorm_reflectionmax_
Rcpp::List rnorm_reflectionmax_(const Eigen::VectorXd& mu1, const Eigen::VectorXd& mu2, const Eigen::MatrixXd& Sigma_chol, const Eigen::MatrixXd& inv_Sigma_chol);
RcppExport SEXP _unbiasedpathsampling_rnorm_reflectionmax_(SEXP mu1SEXP, SEXP mu2SEXP, SEXP Sigma_cholSEXP, SEXP inv_Sigma_cholSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Sigma_chol(Sigma_cholSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type inv_Sigma_chol(inv_Sigma_cholSEXP);
    rcpp_result_gen = Rcpp::wrap(rnorm_reflectionmax_(mu1, mu2, Sigma_chol, inv_Sigma_chol));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_unbiasedpathsampling_logcosh", (DL_FUNC) &_unbiasedpathsampling_logcosh, 1},
    {"_unbiasedpathsampling_gaussian_max_couplingC", (DL_FUNC) &_unbiasedpathsampling_gaussian_max_couplingC, 4},
    {"_unbiasedpathsampling_gaussian_max_coupling_cholesky", (DL_FUNC) &_unbiasedpathsampling_gaussian_max_coupling_cholesky, 6},
    {"_unbiasedpathsampling_xbeta_2", (DL_FUNC) &_unbiasedpathsampling_xbeta_2, 2},
    {"_unbiasedpathsampling_w_rejsamplerC", (DL_FUNC) &_unbiasedpathsampling_w_rejsamplerC, 3},
    {"_unbiasedpathsampling_w_max_couplingC", (DL_FUNC) &_unbiasedpathsampling_w_max_couplingC, 3},
    {"_unbiasedpathsampling_estimator_bin", (DL_FUNC) &_unbiasedpathsampling_estimator_bin, 6},
    {"_unbiasedpathsampling_gradlognormal", (DL_FUNC) &_unbiasedpathsampling_gradlognormal, 3},
    {"_unbiasedpathsampling_rinvgaussian_c", (DL_FUNC) &_unbiasedpathsampling_rinvgaussian_c, 3},
    {"_unbiasedpathsampling_rinvgaussian_coupled_c", (DL_FUNC) &_unbiasedpathsampling_rinvgaussian_coupled_c, 4},
    {"_unbiasedpathsampling_sigma_", (DL_FUNC) &_unbiasedpathsampling_sigma_, 2},
    {"_unbiasedpathsampling_m_sigma_function_", (DL_FUNC) &_unbiasedpathsampling_m_sigma_function_, 4},
    {"_unbiasedpathsampling_xbeta_", (DL_FUNC) &_unbiasedpathsampling_xbeta_, 2},
    {"_unbiasedpathsampling_rmvnorm", (DL_FUNC) &_unbiasedpathsampling_rmvnorm, 3},
    {"_unbiasedpathsampling_rmvnorm_cholesky", (DL_FUNC) &_unbiasedpathsampling_rmvnorm_cholesky, 3},
    {"_unbiasedpathsampling_dmvnorm", (DL_FUNC) &_unbiasedpathsampling_dmvnorm, 3},
    {"_unbiasedpathsampling_dmvnorm_cholesky_inverse", (DL_FUNC) &_unbiasedpathsampling_dmvnorm_cholesky_inverse, 3},
    {"_unbiasedpathsampling_rnorm_reflectionmax_", (DL_FUNC) &_unbiasedpathsampling_rnorm_reflectionmax_, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_unbiasedpathsampling(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
